//#####################################################################
// Copyright 2012.
// This file is part of PhysBAM whose distribution is governed by the license contained in the accompanying file PHYSBAM_COPYRIGHT.txt.
//#####################################################################
#include "FEM_TABLE.h"

namespace PhysBAM{

// Order[12]: u0.x, u1.x, u2.x, u3.x, u4.x, u5.x, u0.y, u1.y, u2.y, u3.y, u4.y, u5.y,
// 0-4, 1-5, 2-6 are opposing pairs; 0-2 are vertices, 3-5 are edges.
//
// Order[10]: u.x^2, v.x*u.x, u.y*u.x, u.x*v.y, v.x^2, u.y*v.x, v.y*v.x, u.y^2, v.y*u.y, v.y^2
// u = x1 - x0, v = x2 - x0

static const int main_table_visc[12][12]=
{
    {1,2,3,0,4,5,6,7,8,0,9,10},
    {2,11,12,13,0,5,14,15,16,17,0,18},
    {3,12,19,13,4,0,20,21,22,23,24,0},
    {0,13,13,25,26,27,0,23,17,28,29,30},
    {4,0,4,26,25,31,24,0,9,29,28,32},
    {5,5,0,27,31,25,18,10,0,30,32,28},
    {6,14,20,0,24,18,33,34,35,0,36,37},
    {7,15,21,23,0,10,34,38,39,40,0,37},
    {8,16,22,17,9,0,35,39,41,40,36,0},
    {0,17,23,28,29,30,0,40,40,42,43,44},
    {9,0,24,29,28,32,36,0,36,43,42,45},
    {10,18,0,30,32,28,37,37,0,44,45,42}
};

static const int unique_entries_visc[85][10]=
{
    {0,0,0,0,0,0,0,0,0,0},
    {3,-6,0,0,3,0,0,6,-12,6},
    {0,-1,0,0,1,0,0,0,-2,2},
    {1,-1,0,0,0,0,0,2,-2,0},
    {-4,4,0,0,0,0,0,-8,8,0},
    {0,4,0,0,-4,0,0,0,8,-8},
    {0,0,-3,3,0,3,-3,0,0,0},
    {0,0,0,1,0,0,-1,0,0,0},
    {0,0,-1,0,0,1,0,0,0,0},
    {0,0,4,0,0,-4,0,0,0,0},
    {0,0,0,-4,0,0,4,0,0,0},
    {0,0,0,0,3,0,0,0,0,6},
    {0,1,0,0,0,0,0,0,2,0},
    {0,-4,0,0,0,0,0,0,-8,0},
    {0,0,0,0,0,1,-1,0,0,0},
    {0,0,0,0,0,0,-3,0,0,0},
    {0,0,0,0,0,-1,0,0,0,0},
    {0,0,0,0,0,4,0,0,0,0},
    {0,0,0,0,0,-4,4,0,0,0},
    {3,0,0,0,0,0,0,6,0,0},
    {0,0,-1,1,0,0,0,0,0,0},
    {0,0,0,-1,0,0,0,0,0,0},
    {0,0,-3,0,0,0,0,0,0,0},
    {0,0,0,4,0,0,0,0,0,0},
    {0,0,4,-4,0,0,0,0,0,0},
    {8,-8,0,0,8,0,0,16,-16,16},
    {0,8,0,0,-8,0,0,0,16,-16},
    {-8,8,0,0,0,0,0,-16,16,0},
    {0,0,-8,4,0,4,-8,0,0,0},
    {0,0,0,-4,0,-4,8,0,0,0},
    {0,0,8,-4,0,-4,0,0,0,0},
    {0,-8,0,0,0,0,0,0,-16,0},
    {0,0,0,4,0,4,0,0,0,0},
    {6,-12,0,0,6,0,0,3,-6,3},
    {0,-2,0,0,2,0,0,0,-1,1},
    {2,-2,0,0,0,0,0,1,-1,0},
    {-8,8,0,0,0,0,0,-4,4,0},
    {0,8,0,0,-8,0,0,0,4,-4},
    {0,0,0,0,6,0,0,0,0,3},
    {0,2,0,0,0,0,0,0,1,0},
    {0,-8,0,0,0,0,0,0,-4,0},
    {6,0,0,0,0,0,0,3,0,0},
    {16,-16,0,0,16,0,0,8,-8,8},
    {0,16,0,0,-16,0,0,0,8,-8},
    {-16,16,0,0,0,0,0,-8,8,0},
    {0,-16,0,0,0,0,0,0,-8,0},
    {3,0,0,0,3,0,0,6,0,6},
    {6,-6,0,0,6,0,0,12,-12,12},
    {12,-12,0,0,12,0,0,24,-24,24},
    {0,0,-3,0,0,0,-3,0,0,0},
    {0,0,-6,3,0,3,-6,0,0,0},
    {0,0,-12,6,0,6,-12,0,0,0},
    {6,0,0,0,6,0,0,3,0,3},
    {12,-12,0,0,12,0,0,6,-6,6},
    {24,-24,0,0,24,0,0,12,-12,12},
    {0,2,0,0,0,0,0,0,4,0},
    {0,0,0,-1,0,-1,0,0,0,0},
    {0,4,0,0,0,0,0,0,2,0},
    {16,-16,0,0,16,0,0,32,-32,32},
    {0,0,-16,8,0,8,-16,0,0,0},
    {32,-32,0,0,32,0,0,16,-16,16},
    {1,0,0,0,0,0,0,2,0,0},
    {0,0,-1,0,0,0,0,0,0,0},
    {-4,0,0,0,0,0,0,-8,0,0},
    {0,0,4,0,0,0,0,0,0,0},
    {2,0,0,0,0,0,0,1,0,0},
    {-8,0,0,0,0,0,0,-4,0,0},
    {0,0,0,0,1,0,0,0,0,2},
    {0,0,0,0,0,0,-1,0,0,0},
    {0,0,0,0,-4,0,0,0,0,-8},
    {0,0,0,0,0,0,4,0,0,0},
    {0,0,0,0,2,0,0,0,0,1},
    {0,0,0,0,-8,0,0,0,0,-4},
    {2,-2,0,0,0,0,0,4,-4,0},
    {0,0,-2,1,0,1,0,0,0,0},
    {4,-4,0,0,0,0,0,2,-2,0},
    {1,-2,0,0,1,0,0,2,-4,2},
    {0,0,-1,1,0,1,-1,0,0,0},
    {-4,8,0,0,-4,0,0,-8,16,-8},
    {0,0,4,-4,0,-4,4,0,0,0},
    {2,-4,0,0,2,0,0,1,-2,1},
    {-8,16,0,0,-8,0,0,-4,8,-4},
    {0,-2,0,0,2,0,0,0,-4,4},
    {0,0,0,1,0,1,-2,0,0,0},
    {0,-4,0,0,4,0,0,0,-2,2}
};

static const int vertex_table_visc[2][2][7]=
{
    {
        {-1,1,46,47,-1,-1,48},
        {-1,6,49,50,-1,-1,51}
    },
    {
        {-1,6,49,50,-1,-1,51},
        {-1,33,52,53,-1,-1,54}
    }
};

static const int edge_table_visc[3][3][3][2][3][2]=
{
    {
        {
            {{{-1,-1},{55,56},{31,32}},{{-1,-1},{56,57},{32,45}}},
            {{{55,56},{-1,-1},{31,32}},{{56,57},{-1,-1},{32,45}}},
            {{{31,32},{31,32},{58,59}},{{32,45},{32,45},{59,60}}}
        },
        {
            {{{-1,-1},{61,62},{63,64}},{{-1,-1},{62,65},{64,66}}},
            {{{61,62},{-1,-1},{63,64}},{{62,65},{-1,-1},{64,66}}},
            {{{63,64},{63,64},{58,59}},{{64,66},{64,66},{59,60}}}
        },
        {
            {{{-1,-1},{67,68},{69,70}},{{-1,-1},{68,71},{70,72}}},
            {{{67,68},{-1,-1},{69,70}},{{68,71},{-1,-1},{70,72}}},
            {{{69,70},{69,70},{58,59}},{{70,72},{70,72},{59,60}}}
        }
    },
    {
        {
            {{{-1,-1},{61,62},{63,64}},{{-1,-1},{62,65},{64,66}}},
            {{{61,62},{-1,-1},{63,64}},{{62,65},{-1,-1},{64,66}}},
            {{{63,64},{63,64},{58,59}},{{64,66},{64,66},{59,60}}}
        },
        {
            {{{-1,-1},{73,74},{27,30}},{{-1,-1},{74,75},{30,44}}},
            {{{73,74},{-1,-1},{27,30}},{{74,75},{-1,-1},{30,44}}},
            {{{27,30},{27,30},{58,59}},{{30,44},{30,44},{59,60}}}
        },
        {
            {{{-1,-1},{76,77},{78,79}},{{-1,-1},{77,80},{79,81}}},
            {{{76,77},{-1,-1},{78,79}},{{77,80},{-1,-1},{79,81}}},
            {{{78,79},{78,79},{58,59}},{{79,81},{79,81},{59,60}}}
        }
    },
    {
        {
            {{{-1,-1},{67,68},{69,70}},{{-1,-1},{68,71},{70,72}}},
            {{{67,68},{-1,-1},{69,70}},{{68,71},{-1,-1},{70,72}}},
            {{{69,70},{69,70},{58,59}},{{70,72},{70,72},{59,60}}}
        },
        {
            {{{-1,-1},{76,77},{78,79}},{{-1,-1},{77,80},{79,81}}},
            {{{76,77},{-1,-1},{78,79}},{{77,80},{-1,-1},{79,81}}},
            {{{78,79},{78,79},{58,59}},{{79,81},{79,81},{59,60}}}
        },
        {
            {{{-1,-1},{82,83},{26,29}},{{-1,-1},{83,84},{29,43}}},
            {{{82,83},{-1,-1},{26,29}},{{83,84},{-1,-1},{29,43}}},
            {{{26,29},{26,29},{58,59}},{{29,43},{29,43},{59,60}}}
        }
    }
};

static const int main_table_pres[3][12]=
{
    {2,0,0,3,4,5,6,0,0,7,8,9},
    {0,10,0,12,11,13,0,14,0,16,15,17},
    {0,0,18,20,21,19,0,0,22,24,25,23}
};

static const int unique_entries_pres[46][4]=
{
    {0,0,0,0},
    {0,0,0,0},
    {0,0,1,-1},
    {0,0,-1,1},
    {0,0,-1,-1},
    {0,0,1,1},
    {-1,1,0,0},
    {1,-1,0,0},
    {1,1,0,0},
    {-1,-1,0,0},
    {0,0,0,1},
    {0,0,0,-1},
    {0,0,-2,1},
    {0,0,2,-1},
    {0,-1,0,0},
    {0,1,0,0},
    {2,-1,0,0},
    {-2,1,0,0},
    {0,0,-1,0},
    {0,0,1,0},
    {0,0,-1,2},
    {0,0,1,-2},
    {1,0,0,0},
    {-1,0,0,0},
    {1,-2,0,0},
    {-1,2,0,0},
    {0,0,2,0},
    {0,0,-2,0},
    {0,0,0,2},
    {0,0,0,-2},
    {-2,0,0,0},
    {2,0,0,0},
    {0,-2,0,0},
    {0,2,0,0},
    {0,0,-2,4},
    {0,0,2,-4},
    {2,-4,0,0},
    {-2,4,0,0},
    {0,0,-4,2},
    {0,0,4,-2},
    {4,-2,0,0},
    {-4,2,0,0},
    {0,0,-2,-2},
    {0,0,2,2},
    {2,2,0,0},
    {-2,-2,0,0}
};

static const int vertex_table_pres[2][3][3]=
{
    {
        {-1,2,3},
        {5,26,28},
        {4,29,27}
    },
    {
        {-1,6,7},
        {9,30,32},
        {8,33,31}
    }
};

static const int edge_table_pres[3][3][2][3][2]=
{
    {
        {{{5,9},{0,0},{4,8}},{{0,0},{4,8},{5,9}}},
        {{{20,24},{0,0},{20,24}},{{0,0},{0,0},{34,36}}},
        {{{0,0},{0,0},{38,40}},{{0,0},{12,16},{12,16}}}
    },
    {
        {{{0,0},{0,0},{35,37}},{{0,0},{21,25},{21,25}}},
        {{{12,16},{0,0},{13,17}},{{0,0},{13,17},{12,16}}},
        {{{4,8},{0,0},{4,8}},{{0,0},{0,0},{42,44}}}
    },
    {
        {{{13,17},{0,0},{13,17}},{{0,0},{0,0},{39,41}}},
        {{{0,0},{0,0},{43,45}},{{0,0},{5,9},{5,9}}},
        {{{21,25},{0,0},{20,24}},{{0,0},{20,24},{21,25}}}
    }
};

static const int bc_table[3][3]={{4,-1,2},{-1,4,2},{2,2,16}};

static const int force_table[6][6]=
{
    {6, -1, -1, -4, 0, 0},
    {-1, 6, -1, 0, -4, 0},
    {-1, -1, 6, 0, 0, -4},
    {-4, 0, 0, 32, 16, 16},
    {0, -4, 0, 16, 32, 16},
    {0, 0, -4, 16, 16, 32}
};

static const int divergence_table[3][6]=
{
    {2, -1, -1, 4, 8, 8},
    {-1, 2, -1, 8, 4, 8},
    {-1, -1, 2, 8, 8, 4}
};

int Unique_Entries_Visc(LOCAL_V_CODE_ID i,int b)
{
    return unique_entries_visc[Value(i)][b];
}

int Unique_Entries_Pres(LOCAL_P_CODE_ID i,int b)
{
    return unique_entries_pres[Value(i)][b];
}
LOCAL_V_CODE_ID Number_Unique_Visc_Codes()
{
    return LOCAL_V_CODE_ID(sizeof(unique_entries_visc)/sizeof(*unique_entries_visc));
}
LOCAL_P_CODE_ID Number_Unique_Pres_Codes()
{
    return LOCAL_P_CODE_ID(sizeof(unique_entries_pres)/sizeof(*unique_entries_pres));
}

MATRIX<LOCAL_V_CODE_ID,2> Main_Table_Visc(int dof_u,int dof_v)
{
    MATRIX<LOCAL_V_CODE_ID,2> M;
    for(int i=0;i<2;i++)
        for(int j=0;j<2;j++)
            M(i,j)=LOCAL_V_CODE_ID(main_table_visc[dof_u+6*i][dof_v+6*j]);
    return M;
}
MATRIX<LOCAL_V_CODE_ID,2> Vertex_Table_Visc(int num_tri)
{
    MATRIX<LOCAL_V_CODE_ID,2> M;
    for(int i=0;i<2;i++)
        for(int j=0;j<2;j++)
            M(i,j)=LOCAL_V_CODE_ID(vertex_table_visc[i][j][num_tri]);
    return M;
}
MATRIX<LOCAL_V_CODE_ID,2> Edge_Table_Visc(int can_u,int can_v,int dof_u,int dof_v)
{
    MATRIX<LOCAL_V_CODE_ID,2> M;
    for(int i=0;i<2;i++)
        for(int j=0;j<2;j++)
            M(i,j)=LOCAL_V_CODE_ID(edge_table_visc[can_u][can_v][dof_u][i][dof_v][j]);
    return M;
}
VECTOR<LOCAL_P_CODE_ID,2> Main_Table_Pres(int dof_p,int dof_u)
{
    VECTOR<LOCAL_P_CODE_ID,2> V;
    for(int i=0;i<2;i++)
        V(i)=LOCAL_P_CODE_ID(main_table_pres[dof_p][dof_u+6*i]);
    return V;
}
VECTOR<LOCAL_P_CODE_ID,2> Vertex_Table_Pres(int neg_x,int neg_z)
{
    VECTOR<LOCAL_P_CODE_ID,2> V;
    for(int i=0;i<2;i++)
        V(i)=LOCAL_P_CODE_ID(vertex_table_pres[i][neg_x][neg_z]);
    return V;
}
VECTOR<LOCAL_P_CODE_ID,2> Edge_Table_Pres(int can_p,int can_u,int dof_p,int dof_u)
{
    VECTOR<LOCAL_P_CODE_ID,2> V;
    for(int i=0;i<2;i++)
        V(i)=LOCAL_P_CODE_ID(edge_table_pres[can_p][can_u][dof_p][dof_u][i]);
    return V;
}

template<class TV>
VECTOR<TV,3> Times_BC_NdotN(const VECTOR<TV,3>& bc)
{
    VECTOR<TV,3> out;
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
            out(i)+=bc(j)*bc_table[i][j];
        out(i)/=30;
    }
    return out;
}

template<class T,class TV>
VECTOR<TV,6> Times_force_NdotN(const VECTOR<TV,6>& f, T tri_area)
{
    VECTOR<TV,6> out;
    T scale=tri_area/180;
    for(int i=0;i<6;i++)
    {
        for(int j=0;j<6;j++)
            out(i)+=f(j)*force_table[i][j];
        out(i)*=scale;
    }
    return out;
}

template<class T>
VECTOR<T,3> Times_div_PdotN(const VECTOR<T,6>& div, T tri_area)
{
    VECTOR<T,3> out;
    for(int i=0;i<3;i++)
        for(int j=0;j<6;j++)
            out(i)+=div(j)*divergence_table[i][j];
    return out*(tri_area/60);
}

template VECTOR<VECTOR<double,2>,6> Times_force_NdotN<double,VECTOR<double,2> >(const VECTOR<VECTOR<double,2>,6>&,double);
template VECTOR<VECTOR<float,2>,6> Times_force_NdotN<float,VECTOR<float,2> >(const VECTOR<VECTOR<float,2>,6>&,float);
template VECTOR<VECTOR<double,2>,3> Times_BC_NdotN<VECTOR<double,2> >(VECTOR<VECTOR<double,2>,3> const&);
template VECTOR<VECTOR<float,2>,3> Times_BC_NdotN<VECTOR<float,2> >(VECTOR<VECTOR<float,2>,3> const&);
template VECTOR<double,3> Times_div_PdotN<double>(VECTOR<double,6> const&,double);
template VECTOR<float,3> Times_div_PdotN<float>(VECTOR<float,6> const&,float);

}

