INTRODUCTION

These source files provide an intial interface for sending data to and receiving
data from our simulator.  The purposes of it is just establish communication
between Houdini and PhysBAM.  It supports few of the features that will
eventually be required.  I am not particularly tied to it; it can be changed,
even entirely if necessary.

FROM HOUDINI

The top level class for sending data from Houdini to PhysBAM is
"deformable_body_simulation."  (There are separate classes for sending the
results back.)  This class contains two lists:

 * simulation_objects
 * simulation_forces

The first is a list of "simulation_object" pointers.  It holds all of the
objects in the scene, and the index of an object in this list is used to
reference that object elsewhere.  There are three types of objects:

 * deformable_body
 * ground_plane
 * scripted_geometry

There many be any number of them, and they may occur in any order.  All are
optional, though a simulation without a deformable_body would be pointless.  The
deformable_body class is used to describe geometry that can evolve and 
deform over time.  It is the only thing that the simulator evolves, and it is
the only thing for which data is passed back.  ground_plane describes a flat
plane intended to be used as a ground.  It can be moved and reoriented.
scripted_geometry is similar to deformable_body, except that the geometry that
it describes is not simulated.  Currently, it will stay fixed because I have not
provided an interface for specifying any motion for it, but it is intended to
eventually reflect a scripted rigid body.

There are currently two types of simulation forces that can be specified:

* gravity_force
* volumetric_force

The gravity_force specifies gravity (magnitude and direction), and the
volumetric force provides an elastic restoring force to an object.

The details of the members of the classes are described in their corresponding
header files.

TO HOUDINI

The classes for sending data back are generally named classname_output, where
classname is the class that would have been used to send the data from Houdini.
The top level class is "deformable_body_simulation_output."  This class means
something very different from what simulation_object mean.  simulation_object
contains all of the information required to run the entire simulation.  The
output is written to multiple files, one file for each frame.  (Named
somthing.0, something.1, ...).  deformable_body_simulation_output only holds the
information pertaining to a single frame of output from the simulation.  The
output from each frame is identical.  The motivation for breaking it up like
this is that it may be possible to start reading and using simulation output
before the enitre simulation has completed.  If this ends up being useful, we
will need a better indicator of when the output for a frame is ready for
consumption.  The class holds a single list of pointers (simulation_data), whose
indexing exactly mirrors that in the deformable_body_simulation
(simulation_objects).  The entries corresponding to deformable_body's hold valid
data (type deformable_body_output), and the rest are NULL pointers.  The
deformable_body_output holds the actual simulation data.

Again, details are in the headers.

COMPILATION

You can compile this code with "g++ -lboost_serialization main.cpp -g -o simple_test"

The code depends on the boost serialization library but no other external libraries.
