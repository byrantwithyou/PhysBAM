//#####################################################################
// Copyright 2009, Andrew Selle.
// This file is part of PhysBAM whose distribution is governed by the license contained in the accompanying file PHYSBAM_COPYRIGHT.txt.
//#####################################################################
#ifndef __FIRE_ADVECTION_POLICY__
#define __FIRE_ADVECTION_POLICY__

#include <PhysBAM_Tools/Advection/ADVECTION_FORWARD.h>
#include <PhysBAM_Tools/Grids_Dyadic_Advection/ADVECTION_DYADIC_FORWARD.h>
#include <PhysBAM_Tools/Grids_RLE_Advection/ADVECTION_RLE_FORWARD.h>
#include <PhysBAM_Tools/Grids_Uniform_Advection/ADVECTION_UNIFORM_FORWARD.h>
#include <PhysBAM_Geometry/Advection_Collidable/ADVECTION_COLLIDABLE_FORWARD.h>
#include <PhysBAM_Geometry/Grids_Dyadic_Advection_Collidable/ADVECTION_COLLIDABLE_DYADIC_FORWARD.h>
#include <PhysBAM_Geometry/Grids_RLE_Advection_Collidable/ADVECTION_COLLIDABLE_RLE_FORWARD.h>
#include <PhysBAM_Geometry/Grids_Uniform_Advection_Collidable/ADVECTION_COLLIDABLE_UNIFORM_FORWARD.h>
#include <PhysBAM_Geometry/Interpolation_Collidable/INTERPOLATION_COLLIDABLE_POLICY.h>
#include <PhysBAM_Dynamics/Advection_Equations/FIRE_ADVECTION_FORWARD.h>
#include <PhysBAM_Dynamics/Interpolation/FIRE_INTERPOLATION_POLICY.h>

namespace PhysBAM{

template<class T_GRID>
struct FIRE_ADVECTION_POLICY
{
private:
    typedef typename T_GRID::SCALAR T;
public:
    // multiphase fire
    typedef ADVECTION_SEMI_LAGRANGIAN_UNIFORM<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::AVERAGING_FIRE_MULTIPHASE,typename FIRE_INTERPOLATION_POLICY<T_GRID>::LINEAR_INTERPOLATION_FIRE_MULTIPHASE> ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE;
    typedef ADVECTION_WRAPPER_FIRE_MULTIPHASE_UNIFORM<T_GRID,T,ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE;
    // multiphase fire collidable
    typedef ADVECTION_SEMI_LAGRANGIAN_COLLIDABLE_FACE_UNIFORM<T_GRID,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_MULTIPHASE_COLLIDABLE> ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_COLLIDABLE_FACE<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_MULTIPHASE,ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE,typename INTERPOLATION_COLLIDABLE_POLICY<T_GRID>::FACE_LOOKUP_COLLIDABLE> NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_FIRE_MULTIPHASE_UNIFORM<T_GRID,T,NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
};

#ifndef COMPILE_WITHOUT_DYADIC_SUPPORT
template<class T>
struct FIRE_ADVECTION_POLICY<OCTREE_GRID<T> >
{
private:
    typedef OCTREE_GRID<T> T_GRID;
public:
    // fire
    typedef ADVECTION_SEMI_LAGRANGIAN_DYADIC<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::AVERAGING_FIRE,typename FIRE_INTERPOLATION_POLICY<T_GRID>::LINEAR_INTERPOLATION_FIRE> ADVECTION_SEMI_LAGRANGIAN_FIRE;
    typedef ADVECTION_WRAPPER_FIRE_DYADIC<T_GRID,T,ADVECTION_SEMI_LAGRANGIAN_FIRE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE;
    // fire collidable
    typedef ADVECTION_SEMI_LAGRANGIAN_COLLIDABLE_FACE_DYADIC<T_GRID,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_COLLIDABLE> ADVECTION_SEMI_LAGRANGIAN_FIRE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_COLLIDABLE_FACE<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE,ADVECTION_SEMI_LAGRANGIAN_FIRE_COLLIDABLE,typename INTERPOLATION_COLLIDABLE_POLICY<T_GRID>::FACE_LOOKUP_COLLIDABLE> NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_FIRE_DYADIC<T_GRID,T,NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_COLLIDABLE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_COLLIDABLE;
    // multiphase fire
    typedef ADVECTION_SEMI_LAGRANGIAN_DYADIC<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::AVERAGING_FIRE_MULTIPHASE,typename FIRE_INTERPOLATION_POLICY<T_GRID>::LINEAR_INTERPOLATION_FIRE_MULTIPHASE> ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE;
    typedef ADVECTION_WRAPPER_FIRE_MULTIPHASE_DYADIC<T_GRID,T,ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE;
    // multiphase fire collidable
    typedef ADVECTION_SEMI_LAGRANGIAN_COLLIDABLE_FACE_DYADIC<T_GRID,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_MULTIPHASE_COLLIDABLE> ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_COLLIDABLE_FACE<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_MULTIPHASE,ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE,typename INTERPOLATION_COLLIDABLE_POLICY<T_GRID>::FACE_LOOKUP_COLLIDABLE> NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_FIRE_MULTIPHASE_DYADIC<T_GRID,T,NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
};

template<class T>
struct FIRE_ADVECTION_POLICY<QUADTREE_GRID<T> >
{
private:
    typedef QUADTREE_GRID<T> T_GRID;
public:
    // fire
    typedef ADVECTION_SEMI_LAGRANGIAN_DYADIC<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::AVERAGING_FIRE,typename FIRE_INTERPOLATION_POLICY<T_GRID>::LINEAR_INTERPOLATION_FIRE> ADVECTION_SEMI_LAGRANGIAN_FIRE;
    typedef ADVECTION_WRAPPER_FIRE_DYADIC<T_GRID,T,ADVECTION_SEMI_LAGRANGIAN_FIRE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE;
    // fire collidable
    typedef ADVECTION_SEMI_LAGRANGIAN_COLLIDABLE_FACE_DYADIC<T_GRID,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_COLLIDABLE> ADVECTION_SEMI_LAGRANGIAN_FIRE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_COLLIDABLE_FACE<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE,ADVECTION_SEMI_LAGRANGIAN_FIRE_COLLIDABLE,typename INTERPOLATION_COLLIDABLE_POLICY<T_GRID>::FACE_LOOKUP_COLLIDABLE> NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_FIRE_DYADIC<T_GRID,T,NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_COLLIDABLE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_COLLIDABLE;
    // multiphase fire
    typedef ADVECTION_SEMI_LAGRANGIAN_DYADIC<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::AVERAGING_FIRE_MULTIPHASE,typename FIRE_INTERPOLATION_POLICY<T_GRID>::LINEAR_INTERPOLATION_FIRE_MULTIPHASE> ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE;
    typedef ADVECTION_WRAPPER_FIRE_MULTIPHASE_DYADIC<T_GRID,T,ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE;
    // multiphase fire collidable
    typedef ADVECTION_SEMI_LAGRANGIAN_COLLIDABLE_FACE_DYADIC<T_GRID,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_MULTIPHASE_COLLIDABLE> ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_COLLIDABLE_FACE<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_MULTIPHASE,ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE,typename INTERPOLATION_COLLIDABLE_POLICY<T_GRID>::FACE_LOOKUP_COLLIDABLE> NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_FIRE_MULTIPHASE_DYADIC<T_GRID,T,NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
};
#endif

#ifndef COMPILE_WITHOUT_RLE_SUPPORT
template<class T>
struct FIRE_ADVECTION_POLICY<RLE_GRID_2D<T> >
{
private:
    typedef RLE_GRID_2D<T> T_GRID;
public:
    // fire
    typedef ADVECTION_SEMI_LAGRANGIAN_RLE<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::AVERAGING_FIRE,typename FIRE_INTERPOLATION_POLICY<T_GRID>::LINEAR_INTERPOLATION_FIRE> ADVECTION_SEMI_LAGRANGIAN_FIRE;
    typedef ADVECTION_WRAPPER_FIRE_RLE<T_GRID,T,ADVECTION_SEMI_LAGRANGIAN_FIRE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE;
    // fire collidable
    typedef ADVECTION_SEMI_LAGRANGIAN_COLLIDABLE_FACE_RLE<T_GRID,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_COLLIDABLE> ADVECTION_SEMI_LAGRANGIAN_FIRE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_COLLIDABLE_FACE<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE,ADVECTION_SEMI_LAGRANGIAN_FIRE_COLLIDABLE,typename INTERPOLATION_COLLIDABLE_POLICY<T_GRID>::FACE_LOOKUP_COLLIDABLE> NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_FIRE_RLE<T_GRID,T,NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_COLLIDABLE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_COLLIDABLE;
    // multiphase fire
    typedef ADVECTION_SEMI_LAGRANGIAN_RLE<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::AVERAGING_FIRE_MULTIPHASE,typename FIRE_INTERPOLATION_POLICY<T_GRID>::LINEAR_INTERPOLATION_FIRE_MULTIPHASE> ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE;
    typedef ADVECTION_WRAPPER_FIRE_MULTIPHASE_RLE<T_GRID,T,ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE;
    // multiphase fire collidable
    typedef ADVECTION_SEMI_LAGRANGIAN_COLLIDABLE_FACE_RLE<T_GRID,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_MULTIPHASE_COLLIDABLE> ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_COLLIDABLE_FACE<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_MULTIPHASE,ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE,typename INTERPOLATION_COLLIDABLE_POLICY<T_GRID>::FACE_LOOKUP_COLLIDABLE> NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_FIRE_MULTIPHASE_RLE<T_GRID,T,NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
};

template<class T>
struct FIRE_ADVECTION_POLICY<RLE_GRID_3D<T> >
{
private:
    typedef RLE_GRID_3D<T> T_GRID;
public:
    // fire
    typedef ADVECTION_SEMI_LAGRANGIAN_RLE<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::AVERAGING_FIRE,typename FIRE_INTERPOLATION_POLICY<T_GRID>::LINEAR_INTERPOLATION_FIRE> ADVECTION_SEMI_LAGRANGIAN_FIRE;
    typedef ADVECTION_WRAPPER_FIRE_RLE<T_GRID,T,ADVECTION_SEMI_LAGRANGIAN_FIRE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE;
    // fire collidable
    typedef ADVECTION_SEMI_LAGRANGIAN_COLLIDABLE_FACE_RLE<T_GRID,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_COLLIDABLE> ADVECTION_SEMI_LAGRANGIAN_FIRE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_COLLIDABLE_FACE<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE,ADVECTION_SEMI_LAGRANGIAN_FIRE_COLLIDABLE,typename INTERPOLATION_COLLIDABLE_POLICY<T_GRID>::FACE_LOOKUP_COLLIDABLE> NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_FIRE_RLE<T_GRID,T,NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_COLLIDABLE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_COLLIDABLE;
    // multiphase fire
    typedef ADVECTION_SEMI_LAGRANGIAN_RLE<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::AVERAGING_FIRE_MULTIPHASE,typename FIRE_INTERPOLATION_POLICY<T_GRID>::LINEAR_INTERPOLATION_FIRE_MULTIPHASE> ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE;
    typedef ADVECTION_WRAPPER_FIRE_MULTIPHASE_RLE<T_GRID,T,ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE;
    // multiphase fire collidable
    typedef ADVECTION_SEMI_LAGRANGIAN_COLLIDABLE_FACE_RLE<T_GRID,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_MULTIPHASE_COLLIDABLE> ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_COLLIDABLE_FACE<T_GRID,T,typename FIRE_INTERPOLATION_POLICY<T_GRID>::FACE_LOOKUP_FIRE_MULTIPHASE,ADVECTION_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE,typename INTERPOLATION_COLLIDABLE_POLICY<T_GRID>::FACE_LOOKUP_COLLIDABLE> NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
    typedef ADVECTION_WRAPPER_FIRE_MULTIPHASE_RLE<T_GRID,T,NESTED_ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE> ADVECTION_WRAPPER_SEMI_LAGRANGIAN_FIRE_MULTIPHASE_COLLIDABLE;
};
#endif
}
#endif
