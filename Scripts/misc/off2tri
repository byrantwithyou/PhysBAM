#!/usr/bin/python

import os
import sys
import optparse
from struct import *

parser = optparse.OptionParser("usage: %prog [options] input.obj output.tri")
parser.add_option('-s','--scale',default=1,type='float',help='scale factor between output and input')
(options,args)=parser.parse_args()
if len(args)!=2: parser.error("invalid number of arguments")
scale=options.scale

input=open(args[0],'r')
if args[1][-3:]=='.gz':
    output=os.popen('gzip -c > '+args[1],'w')
else:
    output=open(args[1],'w')

assert(input.readline().startswith('OFF'))
(nv,nf,zero)=map(int,input.readline().split())
assert(not zero)
vertices=[]
while len(vertices)<nv:
    words=input.readline().split()
    if not len(words): continue
    assert(len(words)==3)
    vertices.append(map(float,words))
triangles=[]
for i in range(nf):
    words=input.readline().split()
    if not len(words): continue
    count=int(words[0])
    assert(len(words)==count+1) 
    v=map(int,words[1:])
    for i in range(len(v)-2):
        triangles.append([v[0]+1,v[i+1]+1,v[i+2]+1])

# write triangle mesh
output.write(pack('i',len(vertices)))
output.write(pack('ii',3,len(triangles)))
for t in triangles: output.write(pack('iii',t[0],t[1],t[2]))

# write particle state
output.write(pack('=biii',1,len(vertices),len(vertices),10))
output.write(pack('bbb',0,0,0))

# write positions
output.write(pack('i',len(vertices)))
for p in vertices: output.write(pack('fff',p[0]/scale,p[1]/scale,p[2]/scale))
