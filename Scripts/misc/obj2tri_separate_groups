#!/usr/bin/python

import os
import sys
import optparse
from struct import *

parser = optparse.OptionParser("usage: %prog [options] input.obj output_prefix.tri")
parser.add_option('-s','--scale',default=1,type='float',help='scale factor between output and input')
(options,global_args)=parser.parse_args()
if len(global_args)!=2: parser.error("invalid number of arguments")
scale=options.scale

input=open(global_args[0],'r')

vertices=[]
triangles=[]

triangle_group_names=[]
triangle_groups=[]
current_group=None

faces_enabled=False
for line in input:
    words=line.split()
    if not len(words): continue
    type=words[0]
    args=words[1:]
    if type=='#': pass
    elif type=='g':
        if args[0]!="default":
            triangle_groups.append([])
            triangle_group_names.append("__".join(words[1:]))
            current_group=triangle_groups[-1]
        else:
            current_group=None
    elif type=='v':
        assert(len(args)==3)
        vertices.append(map(float,args))
    elif type=='nv': pass
    elif type=='f':
        v=map(lambda t:int(t.split('/')[0]),args)
        for i in range(len(v)-2):
            if current_group != None:
                current_group.append([v[0],v[i+1],v[i+2]])
            else:
                triangles.append([v[0],v[i+1],v[i+2]])
                
    
    else: pass #assert(false)

for name,group in map(lambda x,y: (x,y),triangle_group_names,triangle_groups):
    filename=global_args[1].replace(".tri","").replace(".gz","")+"__"+name+".tri.gz"
    print "Writing group %s as %s"%(name,filename)

    goutput=os.popen("gzip -c > "+filename,'w')
    
    # write triangle mesh
    goutput.write(pack('i',len(vertices)))
    goutput.write(pack('ii',3,len(group)))
    for x,y,z in group: goutput.write(pack('iii',x,y,z))
    
    # write particle state
    goutput.write(pack('=biii',1,len(vertices),len(vertices),10))
    goutput.write(pack('bbb',0,0,0))
    
    # write positions
    goutput.write(pack('i',len(vertices)))
    for p in vertices: goutput.write(pack('fff',p[0]/scale,p[1]/scale,p[2]/scale))
    

