=DONE;
operator-();
operator+;
operator-;
operator*;
operator/;
Double_Contract;
Identity_Matrix;
Transpose_Times;
Transpose_Times_Self;
Multiply_With_Symmetric_Result;
Transpose_Times_With_Symmetric_Result;
Transposed();
Twice_Symmetric_Part;
Times_Self_Transpose;
Times_Transpose;
Trace;
Outer_Product;// (u), (u,v)
::exp;
::log;
Diagonal_Part;
Times_Cross_Product_Matrix;
Cross_Product_Matrix;
Cross_Product_Matrix_Times;
Contract_Permutation_Tensor;



=COMPOSITE;
Conjugate;
Conjugate_With_Cross_Product_Matrix;
Conjugate_With_Transpose;
operator*=;
operator+=;
operator-=;
operator/=;
Deviatoric;
Dilational;
Frobenius_Norm_Squared;
Transpose();
Normal_Equations_Matrix;
Outer_Product_Matrix;
Squared;
Symmetric_Part;
Max_Abs;
Componentwise_Max;
Componentwise_Min;
Abs;
Frobenius_Norm;
Inverse;
Inverse_Times;
Invert;
Antisymmetric_Part_Cross_Product_Vector;


=ACCUM;
Max;
Min;
operator!=;
operator==;


=ROW/COL;
Add_Column;
Add_Row;
Column;
Column_Magnitudes;
Column_Sum;
Largest_Column;
Largest_Column_Normalized;
Normalize_Columns;
Row;
Set_Column;
Set_Row;


=Decomposition
Eigenvalues;
Fast_Solve_Eigenproblem;
First_Eigenvector_From_Ordered_Eigenvalues;
Last_Eigenvector_From_Ordered_Eigenvalues;
Singular_Value_Decomposition;
Solve_Eigenproblem;
Indefinite_Polar_Decomposition;


=OTHER;
Cofactor_Matrix;
Derivative_Rotation_Matrix;
Determinant;
Element_Lower;
Element_Upper;
Extract_Rotation;
Extract_Translation;
From_Linear;
From_Matrix;
Get_Submatrix;
Homogeneous_Times
Invert_Rotation_And_Translation;
Jacobi_Transform;
Left_Procrustes_Rotation;
Maximum_Eigenvalue_Eigenvector_Pair;
Normal_Equations_Solve;
Parallelepiped_Measure;
Positive_Definite;
Positive_Definite_Part;
Positive_Semidefinite;
Q_From_QR_Factorization;
R_From_QR_Factorization;
Raw_Index;
Robust_Inverse_Times;
Rotation_Matrix;
Rotation_Matrix;
Rotation_Matrix_X_Axis;
Rotation_Matrix_Y_Axis;
Rotation_Matrix_Z_Axis;
Rotation_Only;
Scale_Matrix;
Set_Submatrix;
Set_Translation;
Sign;
Simplex_Minimum_Altitude;
Transform_2X2;
Transform_3X3;
Translation_Matrix;
Unit_Matrix;
Weighted_Normal;
operator();
