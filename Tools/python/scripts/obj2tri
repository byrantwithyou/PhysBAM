#!/usr/bin/python

import os
import sys
import optparse
from struct import *

parser = optparse.OptionParser("usage: %prog [options] input.obj output.tri")
parser.add_option('-s','--scale',default=1,type='float',help='scale factor between output and input')
(options,args)=parser.parse_args()
if len(args)!=2: parser.error("invalid number of arguments")
scale=options.scale

input=open(args[0],'r')
output_file=args[1]

vertices=[]
triangles=[]
for line in input:
    words=line.split()
    if not len(words): continue
    type=words[0]
    args=words[1:]
    if type=='#': pass
    elif type=='v':
        assert(len(args)==3)
        vertices.append(map(float,args))
    elif type=='nv': pass
    elif type=='f':
        v=map(lambda t:int(t.split('/')[0]),args)
        for i in range(len(v)-2):
            triangles.append([v[0],v[i+1],v[i+2]])
    else: pass #assert(false)

import physbam
#import physbam_help
tri=physbam.TRIANGULATED_SURFACE_f.Create()
for t in triangles:
    tri.mesh.elements.Append(t)
tri.particles.Preallocate(len(v))
for v in vertices:
    tri.particles.X[tri.particles.Add_Particle()]=physbam.Vf3(*v)
tri.Update_Number_Nodes()
physbam.Write_To_File("float",output_file,tri)

