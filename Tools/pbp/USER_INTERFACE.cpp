// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "USER_INTERFACE.h"

void USER_INTERFACE::cb_add_file_i(Fl_Menu_*, void*) {
  char* filename=fl_file_chooser("Choose Vieo File","*.avi","");
if(filename){
    video_window->Add_File(filename);
    Update_Sequence_UI();Update_UI();
        video_window->Resize_Parent(window);
    window->damage(1);};
}
void USER_INTERFACE::cb_add_file(Fl_Menu_* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_add_file_i(o,v);
}

void USER_INTERFACE::cb_add_file_new_sequence_i(Fl_Menu_*, void*) {
  char* filename=fl_file_chooser("Choose Vieo File","*.avi","");
if(filename){
    video_window->Add_File(filename,true);
    Update_Sequence_UI();Update_UI();
        video_window->Resize_Parent(window);
    window->damage(1);};
}
void USER_INTERFACE::cb_add_file_new_sequence(Fl_Menu_* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_add_file_new_sequence_i(o,v);
}

void USER_INTERFACE::cb_exit_menu_item_i(Fl_Menu_*, void*) {
  exit(0);
}
void USER_INTERFACE::cb_exit_menu_item(Fl_Menu_* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_exit_menu_item_i(o,v);
}

void USER_INTERFACE::cb_view_center_i(Fl_Menu_*, void*) {
  video_window->Center_Video_Current();
}
void USER_INTERFACE::cb_view_center(Fl_Menu_* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_view_center_i(o,v);
}

void USER_INTERFACE::cb_view_zoom_i(Fl_Menu_*, void*) {
  video_window->Zoom_Video_Current();
}
void USER_INTERFACE::cb_view_zoom(Fl_Menu_* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_view_zoom_i(o,v);
}

void USER_INTERFACE::cb_view_zoom_actual_i(Fl_Menu_*, void*) {
  video_window->Zoom_Actual_Current();
}
void USER_INTERFACE::cb_view_zoom_actual(Fl_Menu_* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_view_zoom_actual_i(o,v);
}

void USER_INTERFACE::cb_view_loop_current_i(Fl_Menu_*, void*) {
  video_window->Loop_Next(0);
Update_UI();
}
void USER_INTERFACE::cb_view_loop_current(Fl_Menu_* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_view_loop_current_i(o,v);
}

void USER_INTERFACE::cb_view_loop_next_i(Fl_Menu_*, void*) {
  video_window->Loop_Next(1);
Update_UI();
}
void USER_INTERFACE::cb_view_loop_next(Fl_Menu_* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_view_loop_next_i(o,v);
}

void USER_INTERFACE::cb_view_loop_all_i(Fl_Menu_*, void*) {
  video_window->Loop_All();
Update_UI();
}
void USER_INTERFACE::cb_view_loop_all(Fl_Menu_* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_view_loop_all_i(o,v);
}

Fl_Menu_Item USER_INTERFACE::menu_Zoom[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Add Video...", 0x4006f,  (Fl_Callback*)USER_INTERFACE::cb_add_file, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Add Video to New Sequence...", 0x4006e,  (Fl_Callback*)USER_INTERFACE::cb_add_file_new_sequence, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Add Frame Sequence...", 0,  0, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0x40071,  (Fl_Callback*)USER_INTERFACE::cb_exit_menu_item, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"View", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Center", 0x66,  (Fl_Callback*)USER_INTERFACE::cb_view_center, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Zoom to Fit", 0x67,  (Fl_Callback*)USER_INTERFACE::cb_view_zoom, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Zoom to actual", 0x61,  (Fl_Callback*)USER_INTERFACE::cb_view_zoom_actual, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Loop Current", 0x77,  (Fl_Callback*)USER_INTERFACE::cb_view_loop_current, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Loop Next", 0x65,  (Fl_Callback*)USER_INTERFACE::cb_view_loop_next, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"View Loop All", 0,  (Fl_Callback*)USER_INTERFACE::cb_view_loop_all, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* USER_INTERFACE::add_file = USER_INTERFACE::menu_Zoom + 1;
Fl_Menu_Item* USER_INTERFACE::add_file_new_sequence = USER_INTERFACE::menu_Zoom + 2;
Fl_Menu_Item* USER_INTERFACE::exit_menu_item = USER_INTERFACE::menu_Zoom + 4;
Fl_Menu_Item* USER_INTERFACE::view_center = USER_INTERFACE::menu_Zoom + 7;
Fl_Menu_Item* USER_INTERFACE::view_zoom = USER_INTERFACE::menu_Zoom + 8;
Fl_Menu_Item* USER_INTERFACE::view_zoom_actual = USER_INTERFACE::menu_Zoom + 9;
Fl_Menu_Item* USER_INTERFACE::view_loop_current = USER_INTERFACE::menu_Zoom + 10;
Fl_Menu_Item* USER_INTERFACE::view_loop_next = USER_INTERFACE::menu_Zoom + 11;
Fl_Menu_Item* USER_INTERFACE::view_loop_all = USER_INTERFACE::menu_Zoom + 12;

void USER_INTERFACE::cb_play_button_i(Fl_Button*, void*) {
  video_window->Play();
Update_UI();
}
void USER_INTERFACE::cb_play_button(Fl_Button* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->parent()->user_data()))->cb_play_button_i(o,v);
}

void USER_INTERFACE::cb_stop_button_i(Fl_Button*, void*) {
  video_window->Stop();
Update_UI();
}
void USER_INTERFACE::cb_stop_button(Fl_Button* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->parent()->user_data()))->cb_stop_button_i(o,v);
}

void USER_INTERFACE::cb_frame_rate_slider_i(Fl_Value_Slider*, void*) {
  video_window->Frame_Rate((int)frame_rate_slider->value());
}
void USER_INTERFACE::cb_frame_rate_slider(Fl_Value_Slider* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->parent()->user_data()))->cb_frame_rate_slider_i(o,v);
}

void USER_INTERFACE::cb_in_button_i(Fl_Button*, void*) {
  video_window->Frame(video_window->In());
Update_UI();
}
void USER_INTERFACE::cb_in_button(Fl_Button* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->parent()->user_data()))->cb_in_button_i(o,v);
}

void USER_INTERFACE::cb_back_frame_i(Fl_Button*, void*) {
  video_window->Frame(video_window->Frame()-1);
Update_UI();
}
void USER_INTERFACE::cb_back_frame(Fl_Button* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->parent()->user_data()))->cb_back_frame_i(o,v);
}

void USER_INTERFACE::cb_out_button_i(Fl_Button*, void*) {
  video_window->Frame(video_window->Out());
Update_UI();
}
void USER_INTERFACE::cb_out_button(Fl_Button* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->parent()->user_data()))->cb_out_button_i(o,v);
}

void USER_INTERFACE::cb_forward_frame_i(Fl_Button*, void*) {
  video_window->Frame(video_window->Frame()+1);
Update_UI();
}
void USER_INTERFACE::cb_forward_frame(Fl_Button* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->parent()->user_data()))->cb_forward_frame_i(o,v);
}

void USER_INTERFACE::cb_set_in_point_i(Fl_Button*, void*) {
  video_window->In(video_window->Frame());
Update_UI();
}
void USER_INTERFACE::cb_set_in_point(Fl_Button* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->parent()->user_data()))->cb_set_in_point_i(o,v);
}

void USER_INTERFACE::cb_set_out_point_i(Fl_Button*, void*) {
  video_window->Out(video_window->Frame());
Update_UI();
}
void USER_INTERFACE::cb_set_out_point(Fl_Button* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->parent()->user_data()))->cb_set_out_point_i(o,v);
}

void USER_INTERFACE::cb_in_frame_i(Fl_Value_Input*, void*) {
  video_window->In((int)in_frame->value());
Update_UI();
}
void USER_INTERFACE::cb_in_frame(Fl_Value_Input* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_in_frame_i(o,v);
}

void USER_INTERFACE::cb_out_frame_i(Fl_Value_Input*, void*) {
  video_window->Out((int)out_frame->value());
Update_UI();
}
void USER_INTERFACE::cb_out_frame(Fl_Value_Input* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_out_frame_i(o,v);
}

void USER_INTERFACE::cb_frame_value_i(Fl_Value_Input*, void*) {
  video_window->Frame((int)frame_value->value());
Update_UI();
}
void USER_INTERFACE::cb_frame_value(Fl_Value_Input* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_frame_value_i(o,v);
}

void USER_INTERFACE::cb_timeline_i(TIMELINE<float>*, void*) {
  PhysBAM::VECTOR<int,2> values=timeline->Subrange();
video_window->In(values[1]);
video_window->Out(values[2]);
video_window->Frame((int)timeline->Frame());
}
void USER_INTERFACE::cb_timeline(TIMELINE<float>* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_timeline_i(o,v);
}

void USER_INTERFACE::cb_sequence_list_i(Fl_Select_Browser*, void*) {
  if(sequence_list->value()) video_window->Select_View(sequence_list->value());
Update_Sequence_UI();
}
void USER_INTERFACE::cb_sequence_list(Fl_Select_Browser* o, void* v) {
  ((USER_INTERFACE*)(o->parent()->user_data()))->cb_sequence_list_i(o,v);
}

USER_INTERFACE::USER_INTERFACE(int argc,char *argv[]) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = window = new Fl_Double_Window(950, 755, "pbp - Video Player");
    w = o;
    o->user_data((void*)(this));
    { PhysBAM::VIDEO_WINDOW* o = video_window = new PhysBAM::VIDEO_WINDOW(0, 25, 950, 610, "label");
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(-2, 0, 1080, 25, "Zoom to actual");
      o->menu(menu_Zoom);
    }
    { Fl_Group* o = new Fl_Group(0, 715, 795, 35);
      { Fl_Button* o = play_button = new Fl_Button(122, 720, 30, 30, "@>");
        o->shortcut(0x70);
        o->callback((Fl_Callback*)cb_play_button);
      }
      { Fl_Button* o = stop_button = new Fl_Button(93, 720, 30, 30, "@square");
        o->tooltip("Stop");
        o->shortcut(0x72);
        o->callback((Fl_Callback*)cb_stop_button);
      }
      { Fl_Value_Slider* o = frame_rate_slider = new Fl_Value_Slider(331, 720, 190, 30, "Frame Rate");
        o->type(1);
        o->minimum(1);
        o->maximum(100);
        o->step(1);
        o->value(24);
        o->callback((Fl_Callback*)cb_frame_rate_slider);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Value_Output* o = frames_per_second = new Fl_Value_Output(561, 720, 46, 30, "FPS:");
        o->maximum(100);
        o->step(0.1);
      }
      { Fl_Button* o = in_button = new Fl_Button(5, 720, 30, 30, "@|<");
        o->tooltip("Jump to In Frame");
        o->shortcut(0x5b);
        o->callback((Fl_Callback*)cb_in_button);
      }
      { Fl_Button* o = back_frame = new Fl_Button(64, 720, 30, 30, "@<|");
        o->tooltip("Backward Frame");
        o->shortcut(0x40073);
        o->callback((Fl_Callback*)cb_back_frame);
      }
      { Fl_Button* o = out_button = new Fl_Button(209, 720, 30, 30, "@>|");
        o->tooltip("Jump to Out Frame");
        o->shortcut(0x5d);
        o->callback((Fl_Callback*)cb_out_button);
      }
      { Fl_Button* o = forward_frame = new Fl_Button(151, 720, 30, 30, "@|>");
        o->tooltip("Forward Frame");
        o->shortcut(0x73);
        o->callback((Fl_Callback*)cb_forward_frame);
      }
      { Fl_Button* o = set_in_point = new Fl_Button(35, 720, 30, 30, "@[]<");
        o->shortcut(0x7b);
        o->callback((Fl_Callback*)cb_set_in_point);
      }
      { Fl_Button* o = set_out_point = new Fl_Button(180, 720, 30, 30, "@>[]");
        o->shortcut(0x7d);
        o->callback((Fl_Callback*)cb_set_out_point);
      }
      o->resizable(NULL);
      o->end();
    }
    { Fl_Value_Input* o = in_frame = new Fl_Value_Input(0, 657, 45, 25, "In");
      o->callback((Fl_Callback*)cb_in_frame);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_ENTER_KEY);
    }
    { Fl_Value_Input* o = out_frame = new Fl_Value_Input(734, 657, 40, 23, "Out");
      o->callback((Fl_Callback*)cb_out_frame);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_ENTER_KEY);
    }
    { Fl_Value_Input* o = frame_value = new Fl_Value_Input(734, 689, 40, 25, "Frame");
      o->callback((Fl_Callback*)cb_frame_value);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_RELEASE);
    }
    { TIMELINE<float>* o = timeline = new TIMELINE<float>(47, 657, 685, 60, "label");
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NO_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->callback((Fl_Callback*)cb_timeline);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Select_Browser* o = sequence_list = new Fl_Select_Browser(780, 655, 167, 90, "Sequences");
      o->type(1);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->selection_color(FL_SELECTION_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->callback((Fl_Callback*)cb_sequence_list);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE_ALWAYS);
    }
    window->resizable(video_window);
    o->end();
  }
  Fl::add_timeout((float)1/video_window->Frame_Rate(),Frame_Timer,this);
  PhysBAM::ARRAY<PhysBAM::ARRAY<std::string> > files;
int index=files.Append(PhysBAM::ARRAY<std::string>());
bool multiple=true;
for(int curr=1;curr<argc;curr++){
        std::cout<<"    (multiple "<<multiple<<")"<<std::endl;
    if(strcmp(argv[curr],"-c")==0) multiple=false;
    else{
        files(index).Append(argv[curr]);
        std::cout<<"reading "<<argv[curr]<<std::endl;
        if(!multiple && curr+1 != argc){
                std::cout<<"adding new guy "<<std::endl;
            files.Append(PhysBAM::ARRAY<std::string>());
            index++;}
        multiple=true;}
}
if(files(index).m==0) files.Remove_Index_Lazy(index);
video_window->Load_Files(files);
Update_Sequence_UI();
if(video_window->Valid()) video_window->Resize_Parent(window);
  video_window->Set_Callback(Window_Callback,this);
}

void USER_INTERFACE::Update_UI() {
  if(video_window->Valid()){
      play_button->label(video_window->Playing()?"@||":"@>");
      in_frame->value(video_window->In());
      out_frame->value(video_window->Out());
      frame_rate_slider->value(video_window->Frame_Rate());
      frames_per_second->value(video_window->frames_per_second);
      timeline->Range(video_window->Min(),video_window->Max(),video_window->Frame()); 
      timeline->Subrange(video_window->In(),video_window->Out());
      frame_value->value(video_window->Frame());
      window->label(video_window->Title().c_str());
  }
}

void USER_INTERFACE::Frame_Timer(void* data) {
  USER_INTERFACE* ui=(USER_INTERFACE*)data;
ui->video_window->Update_Frame();
ui->Update_UI();
Fl::repeat_timeout((float)1/ui->video_window->Frame_Rate(),Frame_Timer,ui);
}

void USER_INTERFACE::Update_Sequence_UI() {
  timeline->Init_Sequence(video_window->Video_Sequences(),video_window->Video_Names());
sequence_list->clear();
const PhysBAM::ARRAY<std::string>& view_names=video_window->View_Names();
for(int i=1;i<=view_names.m;i++){sequence_list->add(view_names(i).c_str());}
int selected_view_index=video_window->Selected_View();
if(selected_view_index) sequence_list->select(selected_view_index);
}

void USER_INTERFACE::Window_Callback(void* data) {
  USER_INTERFACE& ui=*(USER_INTERFACE*)data;
ui.Update_Sequence_UI();
}
