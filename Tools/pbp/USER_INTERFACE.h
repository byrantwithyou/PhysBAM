// generated by Fast Light User Interface Designer (fluid) version 1.0107

#ifndef USER_INTERFACE_h
#define USER_INTERFACE_h
#include <PhysBAM_Tools/Arrays/ARRAY.h>
#include "TIMELINE.h"
#include "VIDEO_WINDOW.h"
#include <FL/Fl.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Menu_Bar.H>
#include <Fl/Fl_Select_Browser.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Value_Slider.H>

class USER_INTERFACE {
public:
  USER_INTERFACE(int argc,char *argv[]);
  Fl_Double_Window *window;
  PhysBAM::VIDEO_WINDOW *video_window;
  static Fl_Menu_Item menu_Zoom[];
  static Fl_Menu_Item *add_file;
private:
  void cb_add_file_i(Fl_Menu_*, void*);
  static void cb_add_file(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *add_file_new_sequence;
private:
  void cb_add_file_new_sequence_i(Fl_Menu_*, void*);
  static void cb_add_file_new_sequence(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *exit_menu_item;
private:
  void cb_exit_menu_item_i(Fl_Menu_*, void*);
  static void cb_exit_menu_item(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *view_center;
private:
  void cb_view_center_i(Fl_Menu_*, void*);
  static void cb_view_center(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *view_zoom;
private:
  void cb_view_zoom_i(Fl_Menu_*, void*);
  static void cb_view_zoom(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *view_zoom_actual;
private:
  void cb_view_zoom_actual_i(Fl_Menu_*, void*);
  static void cb_view_zoom_actual(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *view_loop_current;
private:
  void cb_view_loop_current_i(Fl_Menu_*, void*);
  static void cb_view_loop_current(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *view_loop_next;
private:
  void cb_view_loop_next_i(Fl_Menu_*, void*);
  static void cb_view_loop_next(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *view_loop_all;
private:
  void cb_view_loop_all_i(Fl_Menu_*, void*);
  static void cb_view_loop_all(Fl_Menu_*, void*);
public:
  Fl_Button *play_button;
private:
  void cb_play_button_i(Fl_Button*, void*);
  static void cb_play_button(Fl_Button*, void*);
public:
  Fl_Button *stop_button;
private:
  void cb_stop_button_i(Fl_Button*, void*);
  static void cb_stop_button(Fl_Button*, void*);
public:
  Fl_Value_Slider *frame_rate_slider;
private:
  void cb_frame_rate_slider_i(Fl_Value_Slider*, void*);
  static void cb_frame_rate_slider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Output *frames_per_second;
  Fl_Button *in_button;
private:
  void cb_in_button_i(Fl_Button*, void*);
  static void cb_in_button(Fl_Button*, void*);
public:
  Fl_Button *back_frame;
private:
  void cb_back_frame_i(Fl_Button*, void*);
  static void cb_back_frame(Fl_Button*, void*);
public:
  Fl_Button *out_button;
private:
  void cb_out_button_i(Fl_Button*, void*);
  static void cb_out_button(Fl_Button*, void*);
public:
  Fl_Button *forward_frame;
private:
  void cb_forward_frame_i(Fl_Button*, void*);
  static void cb_forward_frame(Fl_Button*, void*);
public:
  Fl_Button *set_in_point;
private:
  void cb_set_in_point_i(Fl_Button*, void*);
  static void cb_set_in_point(Fl_Button*, void*);
public:
  Fl_Button *set_out_point;
private:
  void cb_set_out_point_i(Fl_Button*, void*);
  static void cb_set_out_point(Fl_Button*, void*);
public:
  Fl_Value_Input *in_frame;
private:
  void cb_in_frame_i(Fl_Value_Input*, void*);
  static void cb_in_frame(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *out_frame;
private:
  void cb_out_frame_i(Fl_Value_Input*, void*);
  static void cb_out_frame(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *frame_value;
private:
  void cb_frame_value_i(Fl_Value_Input*, void*);
  static void cb_frame_value(Fl_Value_Input*, void*);
public:
  TIMELINE<float> *timeline;
private:
  void cb_timeline_i(TIMELINE<float>*, void*);
  static void cb_timeline(TIMELINE<float>*, void*);
public:
  Fl_Select_Browser *sequence_list;
private:
  void cb_sequence_list_i(Fl_Select_Browser*, void*);
  static void cb_sequence_list(Fl_Select_Browser*, void*);
public:
  void Update_UI();
  static void Frame_Timer(void* data);
  void Update_Sequence_UI();
  static void Window_Callback(void* data);
};
#endif
